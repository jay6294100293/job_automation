"""
Django settings for job_automation project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/

for dubug just change the comments for db and debug
"""
import dj_database_url
import os
from pathlib import Path
import os
from decouple import config

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env_path = BASE_DIR / '.env.debug'
# env_path = BASE_DIR / '.env'
load_dotenv(env_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Production hosts
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_celery_beat',
    'monitoring',
    'accounts',
    'jobs',
    'followups',
    'dashboard',
    'documents',
    'api',
    'rest_framework.authtoken',

]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'job_automation.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'dashboard.context_processors.sidebar_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'job_automation.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES = {
#     'default': dj_database_url.config(
#         default=f"postgresql://{os.getenv('DB_USER', 'django_user')}:{os.getenv('DB_PASSWORD', 'password')}@{os.getenv('DB_HOST', 'localhost')}:{os.getenv('DB_PORT', '5432')}/{os.getenv('DB_NAME', 'job_automation')}"
#     )
# }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LEGAL_COMPLIANCE = {
    'DATA_RETENTION_DAYS': 7,  # Email data retention
    'CONSENT_VERSION': '1.0',
    'REQUIRED_CONSENTS': [
        'terms_accepted',
        'privacy_accepted',
        'email_consent',
        'browser_consent',
        'calendar_consent',
        'ai_consent'
    ]
}

# Legal RSS feed sources (only official RSS feeds)
LEGAL_RSS_FEEDS = {
    'indeed': {
        'base_url': 'https://rss.indeed.com/rss',
        'legal_status': 'OFFICIAL_RSS',
        'terms_url': 'https://indeed.com/legal/terms',
        'robots_compliant': True
    },
    'stackoverflow': {
        'base_url': 'https://stackoverflow.com/jobs/feed',
        'legal_status': 'OFFICIAL_RSS',
        'terms_url': 'https://stackoverflow.com/legal/terms-of-service',
        'robots_compliant': True
    },
    'github_jobs': {
        'base_url': 'https://jobs.github.com/positions.atom',
        'legal_status': 'OFFICIAL_RSS',
        'terms_url': 'https://docs.github.com/en/site-policy/github-terms/github-terms-of-service',
        'robots_compliant': True
    },
    'remoteok': {
        'base_url': 'https://remoteok.io/remote-jobs.rss',
        'legal_status': 'OFFICIAL_RSS',
        'terms_url': 'https://remoteok.io/terms',
        'robots_compliant': True
    }
}

# Google Calendar API settings (free tier)
GOOGLE_CALENDAR_API = {
    'CLIENT_ID': os.getenv('GOOGLE_CLIENT_ID', 'your_google_client_id.apps.googleusercontent.com'),
    'CLIENT_SECRET': os.getenv('GOOGLE_CLIENT_SECRET', 'your_google_client_secret'),
    'REDIRECT_URI': 'https://ai.jobautomation.me/calendar/callback/',
    'SCOPES': ['https://www.googleapis.com/auth/calendar.events']
}

# Email processing settings
EMAIL_PROCESSING = {
    'DEDICATED_EMAIL_REQUIRED': True,
    'MAX_RETENTION_DAYS': 7,
    'ALLOWED_DOMAINS': ['gmail.com', 'outlook.com', 'yahoo.com'],
    'AUTO_DELETE_PROCESSED_EMAILS': True
}

# Browser extension settings
BROWSER_EXTENSION = {
    'CONSENT_REQUIRED': True,
    'API_KEY': os.getenv('BROWSER_EXTENSION_API_KEY', 'ext_legal_secure_key_12345'),
    'ALLOWED_ORIGINS': [
        'https://indeed.com',
        'https://linkedin.com',
        'https://stackoverflow.com',
        'https://glassdoor.com',
        'https://angel.co',
        'https://dice.com'
    ]
}

# Celery Configuration (for background RSS processing)
CELERY_BROKER_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/Toronto'
CELERY_ENABLE_UTC = True

# RSS Configuration
RSS_DISCOVERY_SETTINGS = {
    'DISCOVERY_INTERVAL_HOURS': 4,
    'MAX_JOBS_PER_FEED': 50,
    'MAX_TOTAL_JOBS_PER_USER': 200,
    'CLEANUP_AFTER_DAYS': 60,
    'MINIMUM_MATCH_SCORE': 0.3
}

# Legal RSS feed limits
RSS_RATE_LIMITS = {
    'REQUESTS_PER_HOUR': 60,  # Max 60 requests per hour per feed
    'REQUESTS_PER_DAY': 1000,  # Max 1000 requests per day total
    'DELAY_BETWEEN_REQUESTS': 10,  # 10 seconds delay between requests
}

# UPDATE EXISTING INSTALLED_APPS - ADD THESE TO YOUR EXISTING LIST
INSTALLED_APPS += [
    'django_celery_results',
]



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    ## Formatters ##
    # Merged all unique formatters from both configurations.
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
        'api': {
            'format': 'API {levelname} {asctime} - {message}',
            'style': '{',
        },
        'resume': {
            'format': 'RESUME {levelname} {asctime} - {message}',
            'style': '{',
        },
        'ai_services': {
            'format': 'AI {levelname} {asctime} - {message}',
            'style': '{',
        },
        'rss_legal': {
            'format': 'RSS {levelname} {asctime} - {message}',
            'style': '{',
        },
        'legal_compliance': {
            'format': 'LEGAL {levelname} {asctime} - {message}',
            'style': '{',
        }
    },

    ## Handlers ##
    # Merged all unique handlers, using the most recent filenames.
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose'
        },
        'api_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'api.log'),
            'formatter': 'api'
        },
        'resume_file': {  # Using the updated filename from the second config
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'resume_automation.log'),
            'formatter': 'resume'
        },
        'ai_services_file': {  # Consolidated name for the AI services handler
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'ai_services.log'),
            'formatter': 'ai_services'
        },
        'rss_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'rss_discovery.log'),
            'formatter': 'rss_legal'
        },
        'legal_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'legal_compliance.log'),
            'formatter': 'legal_compliance'
        },
    },

    ## Root Logger ##
    # Added the root logger for catch-all logging.
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },

    ## Loggers ##
    # Combined all loggers, grouping them by their respective handlers.
    'loggers': {
        # General Django loggers
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,  # Propagate to root to catch errors in 'file' handler
        },
        'jobs': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'followups': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'documents': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        # API logger
        'api': {
            'handlers': ['console', 'api_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        # Resume, skills, and job matching loggers
        'resume_automation': {
            'handlers': ['console', 'resume_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'skills_management': {
            'handlers': ['console', 'resume_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'job_matching': {
            'handlers': ['console', 'resume_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # AI services, cost tracking, and research loggers
        'documents.ai_services': {
            'handlers': ['console', 'ai_services_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'documents.cost_tracker': {
            'handlers': ['console', 'ai_services_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'documents.research': {
            'handlers': ['console', 'ai_services_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # RSS feed and compliance loggers
        'jobs.rss_reader': {
            'handlers': ['console', 'rss_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'jobs.rss_compliance': {
            'handlers': ['console', 'rss_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'jobs.tasks': {
            'handlers': ['console', 'rss_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Legal and middleware loggers
        'accounts.middleware': {
            'handlers': ['console', 'legal_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

LOGS_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# Create generated_resumes directory if it doesn't exist - ADD THIS
RESUME_DIR = os.path.join(BASE_DIR, 'generated_resumes')
if not os.path.exists(RESUME_DIR):
    os.makedirs(RESUME_DIR)

# Authentication URLs
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 minutes default
    },
    'extension': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'extension-cache',
        'TIMEOUT': 60,  # 1 minute for extension data
    }
}
# ADD THESE NEW CACHE SETTINGS FOR PERFORMANCE
# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': os.getenv('REDIS_URL', 'redis://localhost:6379/1'),
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     },
#     'skills': {  # Dedicated cache for skills data
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': os.getenv('REDIS_URL', 'redis://localhost:6379/2'),
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         },
#         'TIMEOUT': 3600,  # 1 hour
#     }
# }


SECURE_CROSS_ORIGIN_OPENER_POLICY = None  # Allow extension popups
SECURE_REFERRER_POLICY = 'same-origin'
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'https://ai.jobautomation.me',
    'https://jobautomation.me',
    "https://n8n.jobautomation.me"
]

# Session settings
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', False)  # Set to True in production
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'




STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'



# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'
CRISPY_TEMPLATE_PACK = 'bootstrap5'

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.AnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '200/hour',        # INCREASE FOR RESUME PROCESSING
        'anon': '50/hour',         # INCREASE FOR WEBHOOKS
        'resume_api': '500/hour',  # ADD SPECIFIC RATE FOR RESUME API
        'n8n_webhook': '1000/hour', # ADD FOR N8N WEBHOOKS
    },
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'EXCEPTION_HANDLER': 'api.exceptions.custom_exception_handler',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_VERSION': 'v1',
    'ALLOWED_VERSIONS': ['v1'],
    'VERSION_PARAM': 'version',
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATE_FORMAT': '%Y-%m-%d',
    'TIME_FORMAT': '%H:%M:%S',
}
# CORS settings for n8n integration
CORS_ALLOWED_ORIGINS = [
    "https://ai.jobautomation.me",
    "https://n8n.jobautomation.me",# Your production domain
    "http://localhost:8000", # Django development server (for testing)
    "http://localhost:3000",  # For development
    "http://127.0.0.1:3000",  # For development

]
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^chrome-extension://.*",
    r"^moz-extension://.*",
    r"^ms-browser-extension://.*",
    r"^safari-extension://.*",
]
# Allow credentials (cookies, authorization headers) to be sent
CORS_ALLOW_CREDENTIALS = True

EXTENSION_SETTINGS = {
    'ALLOWED_ORIGINS': [
        'chrome-extension://*',
        'moz-extension://*',
        'ms-browser-extension://*',
    ],
    'MAX_JOBS_PER_USER': 10000,
    'RATE_LIMIT_JOBS': '100/hour',
    'RATE_LIMIT_AUTH': '20/hour',
    'ENABLE_ACTIVITY_LOGGING': True,
    'ENABLE_ERROR_TRACKING': True,
}

# Allowed headers that can be sent with requests
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-api-key',  # Custom header for API keys
]

# Allowed methods for CORS requests
CORS_ALLOWED_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# For development only - allows all origins (DISABLE IN PRODUCTION)
# Uncomment next line ONLY for development testing
# CORS_ALLOW_ALL_ORIGINS = True

# Preflight request caching (in seconds)
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours

# Additional CORS settings for API
CORS_EXPOSE_HEADERS = [
    'Content-Range',
    'X-Content-Range',
    'X-Total-Count',  # For pagination info
]
CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-extension-id',
]
# For API endpoints, we can be more permissive with CSRF
CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access to CSRF token
CSRF_COOKIE_SAMESITE = 'Lax'  # Allow cross-site requests with some restrictions


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp-relay.brevo.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('BREVO_LOGIN')
EMAIL_HOST_PASSWORD = os.getenv('BREVO_SMTP_KEY')
DEFAULT_FROM_EMAIL = os.getenv('BREVO_LOGIN')

# n8n Integration - UPDATE EXISTING
N8N_WEBHOOK_URL = config('N8N_WEBHOOK_URL', default='https://n8n.jobautomation.me/webhook/')
N8N_API_TOKEN = os.getenv('N8N_API_TOKEN')
N8N_BASIC_AUTH_USER = os.getenv('N8N_BASIC_AUTH_USER', 'admin')
N8N_BASIC_AUTH_PASSWORD = os.getenv('N8N_BASIC_AUTH_PASSWORD', 'admin123')




RESUME_AUTOMATION_SETTINGS = {
    'AUTO_SKILL_UPDATE': os.getenv('AUTO_SKILL_UPDATE', 'True').lower() == 'true',
    'DEFAULT_TEMPLATE_ID': os.getenv('DEFAULT_TEMPLATE_ID', None),
    'MAX_SKILLS_PER_RESUME': int(os.getenv('MAX_SKILLS_PER_RESUME', '25')),
    'SKILL_MATCH_THRESHOLD': float(os.getenv('SKILL_MATCH_THRESHOLD', '0.7')),
    'ENABLE_NOTIFICATIONS': os.getenv('ENABLE_NOTIFICATIONS', 'True').lower() == 'true',
    'RESUME_STORAGE_PATH': os.getenv('RESUME_STORAGE_PATH', str(BASE_DIR / 'generated_resumes')),
    'ENABLE_CACHING': os.getenv('ENABLE_CACHING', 'True').lower() == 'true',
    'CACHE_TIMEOUT': int(os.getenv('CACHE_TIMEOUT', '3600')),  # 1 hour
}

DOCUMENT_GENERATION = {
    'PDF_ENGINE': os.getenv('PDF_ENGINE', 'wkhtmltopdf'),
    'DOCX_TEMPLATE_PATH': os.getenv('DOCX_TEMPLATE_PATH', str(BASE_DIR / 'templates' / 'resume_template.docx')),
    'OUTPUT_FORMATS': ['pdf', 'docx'],
    'QUALITY_SETTINGS': {
        'pdf': {
            'page-size': 'A4',
            'orientation': 'Portrait',
            'margin-top': '0.75in',
            'margin-right': '0.75in',
            'margin-bottom': '0.75in',
            'margin-left': '0.75in',
        }
    }
}

# AI APIs Configuration (Groq + OpenRouter Only)
GROQ_API_KEY = config('GROQ_API_KEY', default='')
OPENROUTER_API_KEY = config('OPENROUTER_API_KEY', default='')
SERPER_API_KEY = config('SERPER_API_KEY', default='')

# AI Service Settings
AI_SETTINGS = {
    'PRIMARY_PROVIDER': 'groq',  # groq or openrouter
    'FALLBACK_PROVIDER': 'openrouter',  # groq or openrouter
    'MAX_RETRIES': 3,
    'TIMEOUT_SECONDS': 30,
    'ENABLE_COST_TRACKING': True,
    'MONTHLY_BUDGET_USD': 20,  # Total monthly budget
    'GROQ_MONTHLY_LIMIT': 10,  # Monthly limit for Groq
    'OPENROUTER_MONTHLY_LIMIT': 10,  # Monthly limit for OpenRouter
}

# Groq Configuration
GROQ_SETTINGS = {
    'MODEL': 'llama3-70b-8192',  # Llama 3.1 70B
    'MAX_TOKENS': 4000,
    'TEMPERATURE': 0.7,
    'TOP_P': 0.9,
}

# OpenRouter Configuration
OPENROUTER_SETTINGS = {
    'MODEL': 'meta-llama/llama-3.1-70b-instruct',  # Fallback model
    'MAX_TOKENS': 4000,
    'TEMPERATURE': 0.7,
    'TOP_P': 0.9,
    'SITE_URL': 'https://ai.jobautomation.me',
    'APP_NAME': 'Job Automation System',
}

# Research API Configuration
SERPER_SETTINGS = {
    'GL': 'ca',  # Country (Canada)
    'HL': 'en',  # Language (English)
    'NUM_RESULTS': 10,
    'TYPE': 'search',  # search, images, videos, news
}

DIRECTORIES_TO_CREATE = [
    os.path.join(BASE_DIR, 'logs'),
    os.path.join(BASE_DIR, 'media', 'documents'),
    os.path.join(BASE_DIR, 'generated_resumes'),
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'staticfiles'),
]

for directory in DIRECTORIES_TO_CREATE:
    os.makedirs(directory, exist_ok=True)

# Security Settings - UPDATED FOR PRODUCTION
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

MONITORING_API_KEY = config('MONITORING_API_KEY', default='default-monitoring-key')