#!/bin/bash

# Complete Digital Ocean Deployment Script with n8n Monitoring
# This script sets up everything you need

set -e

echo "üöÄ Django Job Automation System - Complete Deployment with n8n Monitoring"
echo "=========================================================================="

# Configuration - UPDATE THESE VALUES
PROJECT_NAME="job_automation"
DOMAIN="ai.jobautomation.me"
N8N_DOMAIN="n8n.jobautomation.me"
EMAIL="your-email@example.com"  # CHANGE THIS
GITHUB_REPO="your-username/job_automation"  # CHANGE THIS

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[i]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

# Step 1: System Update and Dependencies
print_info "Step 1/10 - Updating system and installing dependencies..."
sudo apt-get update && sudo apt-get upgrade -y
sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common \
    gnupg \
    lsb-release \
    git \
    ufw \
    nginx \
    certbot \
    python3-certbot-nginx \
    bc \
    jq

print_status "System updated successfully!"

# Step 2: Install Docker and Docker Compose
print_info "Step 2/10 - Installing Docker and Docker Compose..."
if ! command -v docker &> /dev/null; then
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    sudo usermod -aG docker $USER
    print_status "Docker installed successfully!"
else
    print_status "Docker already installed!"
fi

# Step 3: Configure Firewall
print_info "Step 3/10 - Configuring firewall..."
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow ssh
sudo ufw allow 80
sudo ufw allow 443
sudo ufw allow 5432  # PostgreSQL external access
sudo ufw allow 6379  # Redis external access
sudo ufw --force enable
print_status "Firewall configured successfully!"

# Step 4: Create project directory
print_info "Step 4/10 - Setting up project directory..."
PROJECT_DIR="/opt/$PROJECT_NAME"
sudo mkdir -p $PROJECT_DIR
sudo chown $USER:$USER $PROJECT_DIR
cd $PROJECT_DIR

# Clone repository if specified
if [ ! -z "$GITHUB_REPO" ] && [ "$GITHUB_REPO" != "your-username/job_automation" ]; then
    git clone https://github.com/$GITHUB_REPO.git .
    print_status "Repository cloned successfully!"
else
    print_warning "Please upload your Django project files to $PROJECT_DIR"
fi

print_status "Project directory setup complete!"

# Step 5: Create necessary directories
print_info "Step 5/10 - Creating application directories..."
mkdir -p {logs,certbot/conf,certbot/www,nginx/conf.d,scripts,n8n_workflows,monitoring}
mkdir -p media/{documents,resumes} staticfiles
chmod +x scripts/*.sh 2>/dev/null || true
print_status "Application directories created!"

# Step 6: Create monitoring directories and files
print_info "Step 6/10 - Setting up monitoring structure..."

# Create monitoring app __init__.py
touch monitoring/__init__.py

# Create monitoring migrations directory
mkdir -p monitoring/migrations
touch monitoring/migrations/__init__.py

print_status "Monitoring structure created!"

# Step 7: Setup environment file
print_info "Step 7/10 - Setting up environment configuration..."
if [ ! -f .env ]; then
    print_warning "Creating default .env file. Please update it with your actual values!"
    
    # Generate random keys
    SECRET_KEY=$(python3 -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())')
    MONITORING_KEY=$(openssl rand -hex 32)
    REDIS_PASSWORD=$(openssl rand -hex 16)
    
    cat > .env << EOF
# Generated by deployment script - UPDATE WITH YOUR VALUES!
DEBUG=False
SECRET_KEY=$SECRET_KEY
ALLOWED_HOSTS=$DOMAIN,localhost,127.0.0.1
CORS_ALLOWED_ORIGINS=https://$DOMAIN,https://$N8N_DOMAIN

# Database Configuration
DB_NAME=n8n
DB_USER=n8n
DB_PASSWORD=7w4iyorXENLP
DB_HOST=postgres
DB_PORT=5432
DATABASE_URL=postgresql://n8n:7w4iyorXENLP@postgres:5432/n8n

# Redis Configuration
REDIS_PASSWORD=$REDIS_PASSWORD
REDIS_URL=redis://:$REDIS_PASSWORD@redis:6379/0
CELERY_BROKER_URL=redis://:$REDIS_PASSWORD@redis:6379/0
CELERY_RESULT_BACKEND=redis://:$REDIS_PASSWORD@redis:6379/0

# Email Configuration - UPDATE THESE
BREVO_LOGIN=your-brevo-login
BREVO_SMTP_KEY=your-brevo-smtp-key

# AI API Keys - UPDATE THESE
GROQ_API_KEY=your-groq-api-key
OPENROUTER_API_KEY=your-openrouter-api-key
AI_PROVIDER=openrouter

# n8n Configuration
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=admin123
N8N_WEBHOOK_URL=https://$N8N_DOMAIN/webhook/

# Monitoring Configuration
MONITORING_API_KEY=$MONITORING_KEY

# Docker Configuration
GITHUB_REPOSITORY=$GITHUB_REPO
IMAGE_TAG=latest
CERTBOT_EMAIL=$EMAIL

# File Storage
MEDIA_URL=/media/
MEDIA_ROOT=/app/media
STATIC_URL=/static/
STATIC_ROOT=/app/staticfiles
EOF
    print_status "Default .env file created!"
else
    print_status ".env file already exists!"
fi

# Step 8: Generate SSL certificates
print_info "Step 8/10 - Generating SSL certificates..."
sudo mkdir -p /var/www/certbot

# Stop nginx if running
sudo systemctl stop nginx 2>/dev/null || true

# Generate certificates for both domains
sudo certbot certonly --standalone \
    --email $EMAIL \
    -d $DOMAIN \
    -d $N8N_DOMAIN \
    --agree-tos \
    --non-interactive || print_warning "SSL certificate generation failed. You can retry later."

print_status "SSL certificate setup completed!"

# Step 9: Build and start Docker containers
print_info "Step 9/10 - Building and starting Docker containers..."

# Start the services
if command -v docker compose &> /dev/null; then
    docker compose up -d --build
else
    docker-compose up -d --build
fi

print_status "Docker containers started successfully!"

# Step 10: Setup monitoring
print_info "Step 10/10 - Setting up monitoring..."

# Setup server monitoring
if [ -f scripts/server_monitor.sh ]; then
    # Update the monitoring script with actual values
    sed -i "s|your-monitoring-api-key-change-this|$MONITORING_KEY|g" scripts/server_monitor.sh
    sed -i "s|ai.jobautomation.me|$DOMAIN|g" scripts/server_monitor.sh
    sed -i "s|n8n.jobautomation.me|$N8N_DOMAIN|g" scripts/server_monitor.sh
    
    chmod +x scripts/server_monitor.sh
    ./scripts/server_monitor.sh --setup
    print_status "Server monitoring setup completed!"
else
    print_warning "Server monitoring script not found. Please add scripts/server_monitor.sh"
fi

# Setup SSL renewal
print_status "Setting up SSL certificate auto-renewal..."
(crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet") | crontab -

# Create backup script
print_status "Creating backup script..."
cat > backup.sh << 'EOF'
#!/bin/bash
# Simple backup script for Django Job Automation System

BACKUP_DIR="/opt/backups"
DATE=$(date +%Y%m%d_%H%M%S)
PROJECT_DIR="/opt/job_automation"

mkdir -p $BACKUP_DIR

# Backup database
docker exec job_automation_postgres_1 pg_dump -U n8n n8n > $BACKUP_DIR/database_$DATE.sql

# Backup media files
tar -czf $BACKUP_DIR/media_$DATE.tar.gz -C $PROJECT_DIR media/

# Keep only last 7 days of backups
find $BACKUP_DIR -name "*.sql" -mtime +7 -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete

echo "Backup completed: $DATE"
EOF

chmod +x backup.sh

# Add backup to crontab
(crontab -l 2>/dev/null; echo "0 2 * * * $PROJECT_DIR/backup.sh") | crontab -

print_status "Backup system setup completed!"

# Wait for services to be ready
print_status "Waiting for services to be ready..."
sleep 30

# Check service health
print_status "Checking service health..."
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY! üéâ"
echo "=========================================="
echo ""
echo "üåê Your Django application: https://$DOMAIN"
echo "üîß n8n automation platform: https://$N8N_DOMAIN"
echo "üìä Admin panel: https://$DOMAIN/admin/"
echo "üè• Health check: https://$DOMAIN/health/"
echo ""
echo "üìã Next Steps:"
echo "1. Update your .env file with actual API keys and credentials"
echo "2. Import the n8n workflow from n8n_workflows/monitoring_workflow.json"
echo "3. Configure Discord webhook in the n8n workflow"
echo "4. Update GitHub repository secrets for CI/CD"
echo "5. Test the monitoring system with a code push"
echo ""
echo "üìÅ Important Files:"
echo "   - Project directory: $PROJECT_DIR"
echo "   - Environment file: $PROJECT_DIR/.env"
echo "   - Monitoring API Key: $MONITORING_KEY"
echo "   - Logs: $PROJECT_DIR/logs/"
echo "   - Backups: /opt/backups/"
echo ""
echo "üîß Useful Commands:"
echo "   - View logs: docker compose logs -f"
echo "   - Test monitoring: ./scripts/server_monitor.sh --test"
echo "   - Restart services: docker compose restart"
echo "   - Check server metrics: ./scripts/server_monitor.sh --once"
echo ""
echo "‚ö†Ô∏è  IMPORTANT: Don't forget to:"
echo "   - Update your .env file with real API keys"
echo "   - Import the n8n monitoring workflow"
echo "   - Configure GitHub Secrets for CI/CD"
echo "   - Update DNS to point to this server"
echo ""
print_status "Your Django Job Automation System with n8n monitoring is ready!"